name: Test Suite (master)

on:
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review, labeled, unlabeled]
  schedule:
    - cron:  '0 23 * * *'

defaults:
  run:
    shell: bash

jobs:
  cleanup-runs:
    if: ${{ contains(github.event.pull_request.labels.*.name, 'test sources') || contains(github.event.pull_request.labels.*.name, 'test tools') || contains(github.event.pull_request.labels.*.name, 'test install') || github.event_name == 'schedule' }}
    runs-on: ubuntu-latest
    steps:
    - uses: rokroskar/workflow-run-cleanup-action@master
      env:
        GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
  test-sources:
    needs: cleanup-runs
    if: ${{ contains(github.event.pull_request.labels.*.name, 'test sources') || github.event_name == 'schedule' }}
    strategy:
      matrix:
        os: [ubuntu-18.04, ubuntu-20.04, macos-10.15]
        include:
          - os: ubuntu-18.04
            DEPENDENCIES_INSTALLATION: "sudo apt -y install clang-format-10 cppcheck"
          - os: ubuntu-20.04
            DEPENDENCIES_INSTALLATION: "sudo apt -y install clang-format-10 cppcheck"
          - os: macos-10.15
            DEPENDENCIES_INSTALLATION: "brew install clang-format cppcheck"
    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@v2
      if: matrix.os == 'ubuntu-20.04' || github.event.pull_request.draft == false
      with:
         submodules: true
    - name: Set up Python 3.8
      if: matrix.os == 'ubuntu-20.04' || github.event.pull_request.draft == false
      uses: actions/setup-python@v2
      with:
        python-version: 3.8
    - name: Test Sources
      if: matrix.os == 'ubuntu-20.04' || github.event.pull_request.draft == false
      run: |
        ${{ matrix.DEPENDENCIES_INSTALLATION }}
        export OPENDR_HOME=$PWD
        export OPENDR_DEVICE=cpu
        pip install -r tests/requirements.txt
        python -m unittest discover -s tests
  test-tools:
    needs: cleanup-runs
    if: ${{ contains(github.event.pull_request.labels.*.name, 'test tools') || github.event_name == 'schedule' }}
    strategy:
      matrix:
        os: [ubuntu-20.04]
        package:
          - engine
          - utils
          - perception/activity_recognition
          - perception/compressive_learning
          - perception/face_recognition
          - perception/heart_anomaly_detection
          - perception/multimodal_human_centric
          - perception/object_tracking_2d
          - perception/object_detection_3d
          - perception/pose_estimation
          - perception/speech_recognition
          - perception/skeleton_based_action_recognition
          - perception/semantic_segmentation
          - control/mobile_manipulation
          - perception/object_detection_2d
          - simulation/human_model_generation
          - perception/facial_expression_recognition
          - control/single_demo_grasp
          # - perception/object_tracking_3d
        include:
          - os: ubuntu-20.04
            DEPENDENCIES_INSTALLATION: "sudo sh -c 'echo \"deb http://packages.ros.org/ros/ubuntu $(lsb_release -sc) main\" > /etc/apt/sources.list.d/ros-latest.list' \
            && curl -s https://raw.githubusercontent.com/ros/rosdistro/master/ros.asc | sudo apt-key add -"
    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@v2
      with:
         submodules: true
    - name: Set up Python 3.8
      uses: actions/setup-python@v2
      with:
        python-version: 3.8
    - name: Test Tools
      run: |
        ${{ matrix.DEPENDENCIES_INSTALLATION }}
        export OPENDR_HOME=$PWD
        export OPENDR_DEVICE=cpu
        export PYTHONPATH=$OPENDR_HOME/src:$PYTHONPATH
        export DISABLE_BCOLZ_AVX2=true
        export ROS_DISTRO=noetic
        make install_compilation_dependencies
        make install_runtime_dependencies
        pip install -r tests/sources/requirements.txt
        if [ ${{ matrix.package }} = "ctests" ]; then
            make ctests
        else
            source tests/sources/tools/control/mobile_manipulation/run_ros.sh
            python -m unittest discover -s tests/sources/tools/${{ matrix.package }}
        fi
  test-install:
    needs: cleanup-runs
    if: ${{ contains(github.event.pull_request.labels.*.name, 'test install') || github.event_name == 'schedule' }}
    strategy:
      matrix:
        os: [ubuntu-20.04]
        package:
          - engine
          - utils
          - perception/activity_recognition
          - perception/compressive_learning
          - perception/face_recognition
          - perception/heart_anomaly_detection
          - perception/multimodal_human_centric
          - perception/object_tracking_2d
          - perception/object_detection_3d
          - perception/pose_estimation
          - perception/speech_recognition
          - perception/skeleton_based_action_recognition
          - perception/semantic_segmentation
          - perception/object_detection_2d
          - perception/facial_expression_recognition
          # - control/mobile_manipulation
          # - simulation/human_model_generation
          # - control/single_demo_grasp
          # - perception/object_tracking_3d
    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python 3.8
      uses: actions/setup-python@v2
      with:
        python-version: 3.8
    - name: Test Install
      run: |
        export DISABLE_BCOLZ_AVX2=true
        sudo apt -y install python3.8-venv libfreetype6-dev git build-essential cmake python3-dev wget libopenblas-dev
        python3 -m venv venv
        source venv/bin/activate
        wget https://raw.githubusercontent.com/opendr-eu/opendr/master/dependencies/pip_requirements.txt
        cat pip_requirements.txt | xargs -n 1 -L 1 pip install
        pip uninstall pkg-resources==0.0.0
        # Test new package
        wget https://raw.githubusercontent.com/passalis/test_repo/main/opendr_toolkit-1.0-cp38-cp38-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_24_x86_64.whl
        pip install opendr_toolkit-1.0-cp38-cp38-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_24_x86_64.whl
        #pip install opendr-toolkit
        python -m unittest discover -s tests/sources/tools/${{ matrix.package }}
